---
import { getCollection } from 'astro:content';
import type { GetStaticPaths } from 'astro';
import '../../styles/global.css';

export const getStaticPaths: GetStaticPaths = async () => {
  const caseStudyEntries = await getCollection('casestudy');
  return caseStudyEntries.map(entry => ({
    params: { slug: entry.slug }, props: { entry },
  }));
}

type Props = {
  entry: any;
}

const { entry }: Props = Astro.props;
const { Content } = await entry.render();
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <title>{entry.data.title} - Case Study | John Smith</title>
    <meta name="description" content={entry.data.description} />
    
    <!-- Open Graph -->
    <meta property="og:title" content={entry.data.title} />
    <meta property="og:description" content={entry.data.description} />
    <meta property="og:type" content="article" />
    
    <!-- Syntax highlighting -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
  </head>
  <body class="bg-white dark:bg-gray-900 transition-colors duration-300">
    <!-- Header -->
    <header class="bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-700 sticky top-0 z-50">
      <div class="max-w-4xl mx-auto px-6 py-4">
        <div class="flex items-center justify-between">
          <a href="/" class="flex items-center text-gray-900 dark:text-white hover:text-purple-600 dark:hover:text-purple-400 transition-colors">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Back to Portfolio
          </a>
          
          <!-- Theme Toggle -->
          <button id="theme-toggle" class="p-2 rounded-lg bg-gray-100 dark:bg-gray-800 text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors">
            <svg id="dark-icon" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
            </svg>
            <svg id="light-icon" class="w-5 h-5 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>
            </svg>
          </button>
        </div>
      </div>
    </header>

    <!-- Main Content -->
    <main class="max-w-4xl mx-auto px-6 py-12">
      <!-- Case Study Header -->
      <header class="mb-12 text-center">
        <div class="inline-flex items-center px-4 py-2 rounded-full bg-gradient-to-r from-purple-100 to-indigo-100 dark:from-purple-900/50 dark:to-indigo-900/50 border border-purple-200 dark:border-purple-700 mb-6">
          <svg class="w-4 h-4 mr-2 text-purple-600 dark:text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-4m-5 0H9m0 0H5m0 0h2m0 0h4"></path>
          </svg>
          <span class="text-sm font-medium text-purple-700 dark:text-purple-300">Case Study</span>
        </div>
        
        <h1 class="text-4xl md:text-5xl font-bold mb-6 text-gray-900 dark:text-white leading-tight">
          {entry.data.title}
        </h1>
        
        <p class="text-xl text-gray-600 dark:text-gray-300 mb-8 max-w-3xl mx-auto leading-relaxed">
          {entry.data.description}
        </p>
        
        <!-- Meta Information -->
        <div class="flex flex-wrap items-center justify-center gap-6 text-sm text-gray-500 dark:text-gray-400 mb-8">
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-4m-5 0H9m0 0H5m0 0h2m0 0h4"></path>
            </svg>
            <span class="font-medium">{entry.data.client}</span>
          </div>
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
            <time>{new Date(entry.data.date).toLocaleDateString('en-US', { 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            })}</time>
          </div>
          {entry.data.readTime && (
            <div class="flex items-center">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <span>{entry.data.readTime}</span>
            </div>
          )}
        </div>
        
        <!-- Tags -->
        {entry.data.tags && entry.data.tags.length > 0 && (
          <div class="flex flex-wrap justify-center gap-2 mb-8">
            {entry.data.tags.map((tag: string) => (
              <span class="px-3 py-1 bg-purple-100 dark:bg-purple-900/50 text-purple-700 dark:text-purple-300 rounded-full text-sm font-medium border border-purple-200 dark:border-purple-800">
                {tag}
              </span>
            ))}
          </div>
        )}

        <!-- Key Result */
        {entry.data.result && (
          <div class="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-xl p-6 mb-8 max-w-2xl mx-auto">
            <div class="flex items-start">
              <svg class="w-6 h-6 text-green-600 dark:text-green-400 mr-3 mt-1 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <div class="text-left">
                <h3 class="text-lg font-semibold text-green-800 dark:text-green-200 mb-2">Key Result</h3>
                <p class="text-green-700 dark:text-green-300">{entry.data.result}</p>
              </div>
            </div>
          </div>
        )}
      </header>

      <!-- Case Study Content -->
      <article class="prose prose-lg dark:prose-invert max-w-none">
        <Content />
      </article>

      <!-- Navigation -->
      <footer class="mt-16 pt-8 border-t border-gray-200 dark:border-gray-700">
        <div class="flex justify-between items-center">
          <a href="/#casestudies" class="inline-flex items-center text-purple-600 dark:text-purple-400 hover:text-purple-700 dark:hover:text-purple-300 font-medium transition-colors">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Back to Case Studies
          </a>
          
          <div class="text-sm text-gray-500 dark:text-gray-400">
            <span>Share this case study</span>
          </div>
        </div>
      </footer>
    </main>

    <style>
      /* Custom styles for better readability */
      .prose h2 {
        @apply text-2xl font-bold text-gray-900 dark:text-white mt-12 mb-6;
      }
      .prose h3 {
        @apply text-xl font-semibold text-gray-900 dark:text-white mt-8 mb-4;
      }
      .prose p {
        @apply text-gray-700 dark:text-gray-300 leading-relaxed mb-6;
      }
      .prose ul, .prose ol {
        @apply text-gray-700 dark:text-gray-300 mb-6;
      }
      .prose li {
        @apply mb-2;
      }
      .prose blockquote {
        @apply border-l-4 border-purple-500 pl-6 italic text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-800 py-4 pr-6 rounded-r-lg;
      }
      .prose code {
        @apply bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-sm font-mono;
      }
      .prose pre {
        @apply bg-gray-900 rounded-lg p-6 overflow-x-auto;
      }
      .prose pre code {
        @apply bg-transparent p-0;
      }
    </style>

    <script>
      // Theme toggle functionality
      const themeToggle = document.getElementById('theme-toggle');
      const darkIcon = document.getElementById('dark-icon');
      const lightIcon = document.getElementById('light-icon');

      // Set initial theme
      const currentTheme = localStorage.getItem('theme') || 'light';
      
      if (darkIcon && lightIcon) {
        if (currentTheme === 'dark') {
          document.documentElement.classList.add('dark');
          darkIcon.classList.add('hidden');
          lightIcon.classList.remove('hidden');
        } else {
          darkIcon.classList.remove('hidden');
          lightIcon.classList.add('hidden');
        }
      }

      if (themeToggle && darkIcon && lightIcon) {
        themeToggle.addEventListener('click', function() {
          // Toggle icons
          darkIcon.classList.toggle('hidden');
          lightIcon.classList.toggle('hidden');

          // Toggle dark mode
          if (document.documentElement.classList.contains('dark')) {
            document.documentElement.classList.remove('dark');
            localStorage.setItem('theme', 'light');
          } else {
            document.documentElement.classList.add('dark');
            localStorage.setItem('theme', 'dark');
          }
        });
      }

      // Initialize Prism.js for syntax highlighting
      if (typeof Prism !== 'undefined') {
        Prism.highlightAll();
      }
    </script>
  </body>
</html>
