---
import { getCollection } from 'astro:content';
import type { GetStaticPaths } from 'astro';
import '../../styles/global.css';

export const getStaticPaths: GetStaticPaths = async () => {
  const blogEntries = await getCollection('blog');
  return blogEntries.map(entry => ({
    params: { slug: entry.slug }, props: { entry },
  }));
}

type Props = {
  entry: any;
}

const { entry }: Props = Astro.props;
const { Content } = await entry.render();
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={entry.data.description} />
    <meta name="keywords" content={entry.data.tags?.join(', ')} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="article" />
    <meta property="og:title" content={entry.data.title} />
    <meta property="og:description" content={entry.data.description} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:title" content={entry.data.title} />
    <meta property="twitter:description" content={entry.data.description} />

    <title>{entry.data.title} - Blog</title>
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet" />
    
    <!-- Prism.js for syntax highlighting -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet" />
  </head>
  <body class="bg-white dark:bg-gray-900 text-gray-900 dark:text-white">
    <!-- Header with back navigation -->
    <header class="sticky top-0 z-50 bg-white/80 dark:bg-gray-900/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-700">
      <div class="max-w-4xl mx-auto px-4 py-4">
        <nav class="flex items-center justify-between">
          <a href="/" class="flex items-center space-x-2 text-primary-600 hover:text-primary-700 transition-colors">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
            <span class="font-medium">Back to Portfolio</span>
          </a>
          
          <div class="flex items-center space-x-4">
            <a href="/#blogs" class="text-gray-600 dark:text-gray-300 hover:text-primary-600 transition-colors">
              All Posts
            </a>
            <button id="theme-toggle" class="p-2 rounded-lg bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors">
              <svg id="theme-toggle-dark-icon" class="hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                <path d="M17.293 13.293A8 8 0 016.707 2.707a8.017 8.017 0 1010.586 10.586z"></path>
              </svg>
              <svg id="theme-toggle-light-icon" class="hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                <path d="M10 2L13.09 8.26L20 9L14 14.74L15.18 21.02L10 18L4.82 21.02L6 14.74L0 9L6.91 8.26L10 2Z"></path>
              </svg>
            </button>
          </div>
        </nav>
      </div>
    </header>

    <!-- Article content -->
    <main class="max-w-4xl mx-auto px-4 py-8">
      <!-- Article header -->
      <article class="prose prose-lg dark:prose-invert max-w-none">
        <header class="mb-8 text-center">
          <h1 class="text-4xl md:text-5xl font-bold mb-4 leading-tight">
            {entry.data.title}
          </h1>
          <p class="text-xl text-gray-600 dark:text-gray-300 mb-6">
            {entry.data.description}
          </p>
          
          <!-- Article meta -->
          <div class="flex flex-wrap items-center justify-center gap-4 text-sm text-gray-500 dark:text-gray-400 mb-6">
            <div class="flex items-center space-x-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
              </svg>
              <span>{entry.data.author}</span>
            </div>
            <div class="flex items-center space-x-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
              <span>{new Date(entry.data.date).toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
              })}</span>
            </div>
            {entry.data.readTime && (
              <div class="flex items-center space-x-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span>{entry.data.readTime}</span>
              </div>
            )}
          </div>
          
          <!-- Tags -->
          {entry.data.tags && entry.data.tags.length > 0 && (
            <div class="flex flex-wrap justify-center gap-2">
              {entry.data.tags.map((tag: string) => (
                <span class="px-3 py-1 bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400 rounded-full text-sm font-medium">
                  #{tag}
                </span>
              ))}
            </div>
          )}
        </header>

        <!-- Article content -->
        <div class="prose-content">
          <Content />
        </div>
      </article>

      <!-- Navigation to other posts -->
      <nav class="mt-16 pt-8 border-t border-gray-200 dark:border-gray-700">
        <div class="flex justify-between items-center">
          <a href="/#blogs" class="inline-flex items-center space-x-2 text-primary-600 hover:text-primary-700 transition-colors">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
            <span>Back to All Posts</span>
          </a>
          
          <div class="flex items-center space-x-4">
            <button onclick="window.scrollTo({ top: 0, behavior: 'smooth' })" class="text-gray-500 hover:text-primary-600 transition-colors">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
              </svg>
            </button>
          </div>
        </div>
      </nav>
    </main>

    <!-- Prism.js for syntax highlighting -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>

    <!-- Dark mode toggle script -->
    <script>
      // Dark mode functionality
      const themeToggle = document.getElementById('theme-toggle');
      const darkIcon = document.getElementById('theme-toggle-dark-icon');
      const lightIcon = document.getElementById('theme-toggle-light-icon');

      // Check for saved theme preference or default to 'light' mode
      const currentTheme = localStorage.getItem('theme') || 'light';
      
      if (darkIcon && lightIcon) {
        if (currentTheme === 'dark') {
          document.documentElement.classList.add('dark');
          darkIcon.classList.add('hidden');
          lightIcon.classList.remove('hidden');
        } else {
          darkIcon.classList.remove('hidden');
          lightIcon.classList.add('hidden');
        }
      }

      if (themeToggle && darkIcon && lightIcon) {
        themeToggle.addEventListener('click', function() {
          // Toggle icons
          darkIcon.classList.toggle('hidden');
          lightIcon.classList.toggle('hidden');

          // Toggle dark mode
          if (document.documentElement.classList.contains('dark')) {
            document.documentElement.classList.remove('dark');
            localStorage.setItem('theme', 'light');
          } else {
            document.documentElement.classList.add('dark');
            localStorage.setItem('theme', 'dark');
          }
        });
      }
    </script>

    <style>
      /* Custom prose styles for better code highlighting */
      .prose-content {
        @apply prose prose-lg dark:prose-invert max-w-none;
      }
      
      .prose-content pre {
        @apply bg-gray-900 dark:bg-gray-800 rounded-lg p-4 overflow-x-auto;
      }
      
      .prose-content code {
        @apply bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded text-sm;
      }
      
      .prose-content pre code {
        @apply bg-transparent p-0;
      }
      
      .prose-content h1, .prose-content h2, .prose-content h3, .prose-content h4 {
        @apply text-gray-900 dark:text-white font-bold;
      }
      
      .prose-content h2 {
        @apply text-2xl mt-8 mb-4;
      }
      
      .prose-content h3 {
        @apply text-xl mt-6 mb-3;
      }
      
      .prose-content p {
        @apply text-gray-700 dark:text-gray-300 leading-relaxed mb-4;
      }
      
      .prose-content ul, .prose-content ol {
        @apply text-gray-700 dark:text-gray-300 mb-4;
      }
      
      .prose-content blockquote {
        @apply border-l-4 border-primary-500 pl-4 italic text-gray-600 dark:text-gray-400;
      }
      
      .prose-content a {
        @apply text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300;
      }
    </style>
  </body>
</html>
